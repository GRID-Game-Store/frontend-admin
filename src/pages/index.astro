---
import "@/styles/globals.css";
import Layout from "../layouts/Layout.astro";
import { CardInfo } from "@/components/cards/сard";
import {
  BadgeDollarSign,
  BarChart3,
  ShoppingBasket,
  UsersRound,
} from "lucide-react";
import { Chart } from "@/components/overview/chart/Chart";
import { RecentSales } from "@/components/overview/recentSales/RecentSales";
import { ShapePieChart } from "@/components/overview/chart/ShapeChart";
import { GET } from "./api/metric/total";
import { GET as GETTransactions  } from "./api/transactions";
import type { TransactionsResponse } from "@/types/types";
import { GET as GETUsers  } from "./api/metric/users";
import { GET as GETActiveUsers  } from "./api/metric/activeUsers";
let response = await GET(Astro)
let responseTransactions = await GETTransactions(Astro);
let responseUsers = await GETUsers(Astro);
let responseActiveUsers = await GETActiveUsers(Astro);

const transactions: TransactionsResponse = await responseTransactions.json();
const users = await responseUsers.json();
const activeUsers = await responseActiveUsers.json();
const data: any  = (await response.json())

console.log();


const dataChartState = [
  {
    name: "Jan",
    total: 0,
    amount: 0
    
  },
  {
    name: "Feb",
    total: 0,
    amount: 0
  },
  {
    name: "Mar",
    total: 0,
    amount: 0
  },
  {
    name: "Apr",
    total: 0,
    amount: 0
  },
  {
    name: "May",
    total: 0,
    amount: 0
  },
  {
    name: "Jun",
    total: 0,
    amount: 0
  },
  {
    name: "Jul",
    total: 0,
    amount: 0
  },
  {
    name: "Aug",
    total: 0,
    amount: 0
  },
  {
    name: "Sep",
    total: 0,
    amount: 0
  },
  {
    name: "Oct",
    total: 0,
    amount: 0
  },
  {
    name: "Nov",
    total: 0,
    amount: 0
  },
  {
    name: "Dec",
    total: 0,
    amount: 0
  },
]
 
dataChartState.forEach((item) => {
  Object.keys(data).map((key) => {
    const nameMonth = key.split("").slice(0, 3).join("").toLowerCase()
    if (nameMonth === item.name.toLowerCase()) {
      item.total = data[key].totalRevenue
      item.amount = data[key].totalSaleGames
    } 
  })
})

const stripePayments =  data.yearSummary && data?.yearSummary.stripePayments
const paypalPayments = data.yearSummary && data.yearSummary.payPalPayments
const totalRevenue = data.yearSummary && data?.yearSummary.totalRevenue
const totalSaleGames = data.yearSummary && data?.yearSummary.totalSaleGames

const dataPipeChart  =   [
  { name: "STRIPE", value: stripePayments },
  { name: "PAYPAL", value: paypalPayments , className:"fill-secondary"},
];

const date = new Date();
let month = date.getMonth();



const getProfitPerMonth = (currentMonth : number, previosMonth : number) => {
  const difference =  currentMonth - previosMonth
  console.log(difference / previosMonth);
  
  return (difference / previosMonth * 100).toFixed(2)
}
console.log(dataChartState);

const totalRevenueProfit = getProfitPerMonth(dataChartState[month].total, dataChartState[month - 1].total)
const totalSalesProfit = getProfitPerMonth(dataChartState[month].amount, dataChartState[month - 1].amount)



---

<Layout title="Overview">
  <main> 
    <div class="mt-20 ml-3 grid gap-4 md:grid-cols-2 lg:grid-cols-4 ">
      <CardInfo
        cardTitle="Total Revenue"
        cardContent=`${totalRevenue} UAH`
        cardContentAddition=`${!isNaN(+totalRevenueProfit) ? totalRevenueProfit + "% from last month" : "" }`
      >
        <BadgeDollarSign />
      </CardInfo>
      <CardInfo
        cardTitle="Current customers"
        cardContent=`${users.totalUsers}`
        cardContentAddition="All registered users"
      >
        <UsersRound />
      </CardInfo>
      <CardInfo
        cardTitle="Sales"
        cardContent=`${totalSaleGames}`
        cardContentAddition=`${!isNaN(+totalSalesProfit) ? totalSalesProfit + "% from last month" : "" }`
      >
        <ShoppingBasket />
      </CardInfo>
      <CardInfo
        cardTitle="Active Now"
        cardContent=`${activeUsers.totalUsersWithGames}`
        cardContentAddition="All active users"
      >
        <BarChart3 />
      </CardInfo>
    </div>
    <div class="flex flex-row mt-2 ml-3">
      <div
        class="mr-5 rounded-lg border bg-card text-card-foreground shadow w-[49.1%] p-1 pl-0"
      >
        <h3
          class="pb-0 tracking-tight text-xl font-extrabold pl-5 pt-3 pb-2 w-max"
        >
          Total Revenue
        </h3>
        <Chart client:idle dataChartState={dataChartState} />
      </div>
      <div
        class="mr-5 rounded-lg border bg-card text-card-foreground shadow w-[300px] p-1 pl-0"
      >
        <h3 class="pb-0 tracking-tight text-xl font-extrabold pl-5 pt-3 w-max">
          Sales
        </h3>
        <ShapePieChart client:load dataPipeChart={dataPipeChart} amount={totalSaleGames} />
        <div>
          <div class="flex items-center space-x-2 ml-2">
            <div class="w-3 h-3 bg-[#16a34a] rounded p-0 m-0"> </div>
            <span class="text-[14px] text-muted-foreground">- STRIPE</span>
          </div>
          <div class="flex items-center space-x-2 ml-2">
            <div class="w-3 h-3 bg-[#0369a0] rounded p-0 m-0"> </div>
            <span class="text-[14px] text-muted-foreground">- PAYPAL</span>
          </div>
        </div>
      </div>
      <RecentSales client:idle transactions={transactions} />
    </div>
  </main>
 
</Layout>
